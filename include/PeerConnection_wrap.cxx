/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_MediasoupClient(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_MediasoupClient(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_MediasoupClient(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


#include <json.hpp>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include "absl/types/optional.h"
using namespace absl;


#include "PeerConnection.hpp"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "PeerConnection_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_RTCError__SWIG_0___() {
  void * jresult ;
  webrtc::RTCError *result = 0 ;
  
  result = (webrtc::RTCError *)new webrtc::RTCError();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_RTCError__SWIG_1___(int jarg1) {
  void * jresult ;
  webrtc::RTCErrorType arg1 ;
  webrtc::RTCError *result = 0 ;
  
  arg1 = (webrtc::RTCErrorType)jarg1; 
  result = (webrtc::RTCError *)new webrtc::RTCError(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_RTCError__SWIG_2___(int jarg1, const char * jarg2) {
  void * jresult ;
  webrtc::RTCErrorType arg1 ;
  std::string arg2 ;
  webrtc::RTCError *result = 0 ;
  
  arg1 = (webrtc::RTCErrorType)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (webrtc::RTCError *)new webrtc::RTCError(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_RTCError__SWIG_3___(void * jarg1) {
  void * jresult ;
  webrtc::RTCError *arg1 = 0 ;
  webrtc::RTCError *result = 0 ;
  
  arg1 = (webrtc::RTCError *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::RTCError const & is null", 0);
    return 0;
  } 
  result = (webrtc::RTCError *)new webrtc::RTCError((webrtc::RTCError const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_OK___() {
  void * jresult ;
  webrtc::RTCError result;
  
  result = webrtc::RTCError::OK();
  jresult = new webrtc::RTCError(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_type___(void * jarg1) {
  int jresult ;
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  webrtc::RTCErrorType result;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  result = (webrtc::RTCErrorType)((webrtc::RTCError const *)arg1)->type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_set_type___(void * jarg1, int jarg2) {
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  webrtc::RTCErrorType arg2 ;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  arg2 = (webrtc::RTCErrorType)jarg2; 
  (arg1)->set_type(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_message___(void * jarg1) {
  char * jresult ;
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  char *result = 0 ;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  result = (char *)((webrtc::RTCError const *)arg1)->message();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_set_message___(void * jarg1, const char * jarg2) {
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  std::string arg2 ;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->set_message(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_error_detail___(void * jarg1) {
  int jresult ;
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  webrtc::RTCErrorDetailType result;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  result = (webrtc::RTCErrorDetailType)((webrtc::RTCError const *)arg1)->error_detail();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_set_error_detail___(void * jarg1, int jarg2) {
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  webrtc::RTCErrorDetailType arg2 ;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  arg2 = (webrtc::RTCErrorDetailType)jarg2; 
  (arg1)->set_error_detail(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_sctp_cause_code___(void * jarg1) {
  void * jresult ;
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  absl::optional< uint16_t > result;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  result = ((webrtc::RTCError const *)arg1)->sctp_cause_code();
  jresult = new absl::optional< uint16_t >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_set_sctp_cause_code___(void * jarg1, void * jarg2) {
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  argp2 = (uint16_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint16_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_sctp_cause_code(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCError_ok___(void * jarg1) {
  unsigned int jresult ;
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  bool result;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  result = (bool)((webrtc::RTCError const *)arg1)->ok();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_RTCError___(void * jarg1) {
  webrtc::RTCError *arg1 = (webrtc::RTCError *) 0 ;
  
  arg1 = (webrtc::RTCError *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RefCountInterface_AddRef___(void * jarg1) {
  rtc::RefCountInterface *arg1 = (rtc::RefCountInterface *) 0 ;
  
  arg1 = (rtc::RefCountInterface *)jarg1; 
  ((rtc::RefCountInterface const *)arg1)->AddRef();
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RefCountInterface_Release___(void * jarg1) {
  int jresult ;
  rtc::RefCountInterface *arg1 = (rtc::RefCountInterface *) 0 ;
  rtc::RefCountReleaseStatus result;
  
  arg1 = (rtc::RefCountInterface *)jarg1; 
  result = (rtc::RefCountReleaseStatus)((rtc::RefCountInterface const *)arg1)->Release();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SdpParseError_line_set___(void * jarg1, const char * jarg2) {
  webrtc::SdpParseError *arg1 = (webrtc::SdpParseError *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (webrtc::SdpParseError *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->line = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SdpParseError_line_get___(void * jarg1) {
  const char * jresult ;
  webrtc::SdpParseError *arg1 = (webrtc::SdpParseError *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (webrtc::SdpParseError *)jarg1; 
  result = (std::string *) & ((arg1)->line);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SdpParseError_description_set___(void * jarg1, const char * jarg2) {
  webrtc::SdpParseError *arg1 = (webrtc::SdpParseError *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (webrtc::SdpParseError *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SdpParseError_description_get___(void * jarg1) {
  const char * jresult ;
  webrtc::SdpParseError *arg1 = (webrtc::SdpParseError *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (webrtc::SdpParseError *)jarg1; 
  result = (std::string *) & ((arg1)->description);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_SdpParseError___() {
  void * jresult ;
  webrtc::SdpParseError *result = 0 ;
  
  result = (webrtc::SdpParseError *)new webrtc::SdpParseError();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_SdpParseError___(void * jarg1) {
  webrtc::SdpParseError *arg1 = (webrtc::SdpParseError *) 0 ;
  
  arg1 = (webrtc::SdpParseError *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_IceCandidateInterface___(void * jarg1) {
  webrtc::IceCandidateInterface *arg1 = (webrtc::IceCandidateInterface *) 0 ;
  
  arg1 = (webrtc::IceCandidateInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_IceCandidateInterface_sdp_mid___(void * jarg1) {
  const char * jresult ;
  webrtc::IceCandidateInterface *arg1 = (webrtc::IceCandidateInterface *) 0 ;
  std::string result;
  
  arg1 = (webrtc::IceCandidateInterface *)jarg1; 
  result = ((webrtc::IceCandidateInterface const *)arg1)->sdp_mid();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_IceCandidateInterface_sdp_mline_index___(void * jarg1) {
  int jresult ;
  webrtc::IceCandidateInterface *arg1 = (webrtc::IceCandidateInterface *) 0 ;
  int result;
  
  arg1 = (webrtc::IceCandidateInterface *)jarg1; 
  result = (int)((webrtc::IceCandidateInterface const *)arg1)->sdp_mline_index();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_IceCandidateInterface_candidate___(void * jarg1) {
  void * jresult ;
  webrtc::IceCandidateInterface *arg1 = (webrtc::IceCandidateInterface *) 0 ;
  cricket::Candidate *result = 0 ;
  
  arg1 = (webrtc::IceCandidateInterface *)jarg1; 
  result = (cricket::Candidate *) &((webrtc::IceCandidateInterface const *)arg1)->candidate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_IceCandidateInterface_server_url___(void * jarg1) {
  const char * jresult ;
  webrtc::IceCandidateInterface *arg1 = (webrtc::IceCandidateInterface *) 0 ;
  std::string result;
  
  arg1 = (webrtc::IceCandidateInterface *)jarg1; 
  result = ((webrtc::IceCandidateInterface const *)arg1)->server_url();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_IceCandidateInterface_ToString___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::IceCandidateInterface *arg1 = (webrtc::IceCandidateInterface *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  arg1 = (webrtc::IceCandidateInterface *)jarg1; 
  arg2 = (std::string *)jarg2; 
  result = (bool)((webrtc::IceCandidateInterface const *)arg1)->ToString(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_CreateIceCandidate__SWIG_0___(const char * jarg1, int jarg2, const char * jarg3, void * jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  webrtc::SdpParseError *arg4 = (webrtc::SdpParseError *) 0 ;
  webrtc::IceCandidateInterface *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (webrtc::SdpParseError *)jarg4; 
  result = (webrtc::IceCandidateInterface *)webrtc::CreateIceCandidate((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_CreateIceCandidate__SWIG_1___(const char * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  cricket::Candidate *arg3 = 0 ;
  SwigValueWrapper< std::unique_ptr< webrtc::IceCandidateInterface > > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  arg3 = (cricket::Candidate *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "cricket::Candidate const & is null", 0);
    return 0;
  } 
  result = webrtc::CreateIceCandidate((std::string const &)*arg1,arg2,(cricket::Candidate const &)*arg3);
  jresult = new std::unique_ptr< webrtc::IceCandidateInterface >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_IceCandidateCollection___(void * jarg1) {
  webrtc::IceCandidateCollection *arg1 = (webrtc::IceCandidateCollection *) 0 ;
  
  arg1 = (webrtc::IceCandidateCollection *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AntelcatfMediasoupClient_IceCandidateCollection_count___(void * jarg1) {
  unsigned long jresult ;
  webrtc::IceCandidateCollection *arg1 = (webrtc::IceCandidateCollection *) 0 ;
  size_t result;
  
  arg1 = (webrtc::IceCandidateCollection *)jarg1; 
  result = ((webrtc::IceCandidateCollection const *)arg1)->count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_IceCandidateCollection_HasCandidate___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::IceCandidateCollection *arg1 = (webrtc::IceCandidateCollection *) 0 ;
  webrtc::IceCandidateInterface *arg2 = (webrtc::IceCandidateInterface *) 0 ;
  bool result;
  
  arg1 = (webrtc::IceCandidateCollection *)jarg1; 
  arg2 = (webrtc::IceCandidateInterface *)jarg2; 
  result = (bool)((webrtc::IceCandidateCollection const *)arg1)->HasCandidate((webrtc::IceCandidateInterface const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_IceCandidateCollection_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  webrtc::IceCandidateCollection *arg1 = (webrtc::IceCandidateCollection *) 0 ;
  size_t arg2 ;
  webrtc::IceCandidateInterface *result = 0 ;
  
  arg1 = (webrtc::IceCandidateCollection *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (webrtc::IceCandidateInterface *)((webrtc::IceCandidateCollection const *)arg1)->at(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SdpTypeToString___(int jarg1) {
  char * jresult ;
  webrtc::SdpType arg1 ;
  char *result = 0 ;
  
  arg1 = (webrtc::SdpType)jarg1; 
  result = (char *)webrtc::SdpTypeToString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SdpTypeFromString___(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  absl::optional< webrtc::SdpType > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = webrtc::SdpTypeFromString((std::string const &)*arg1);
  jresult = new absl::optional< webrtc::SdpType >(result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_kOffer_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)webrtc::SessionDescriptionInterface::kOffer;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_kPrAnswer_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)webrtc::SessionDescriptionInterface::kPrAnswer;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_kAnswer_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)webrtc::SessionDescriptionInterface::kAnswer;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_kRollback_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)webrtc::SessionDescriptionInterface::kRollback;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_SessionDescriptionInterface___(void * jarg1) {
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_Clone___(void * jarg1) {
  void * jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  SwigValueWrapper< std::unique_ptr< webrtc::SessionDescriptionInterface > > result;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  result = ((webrtc::SessionDescriptionInterface const *)arg1)->Clone();
  jresult = new std::unique_ptr< webrtc::SessionDescriptionInterface >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_description___(void * jarg1) {
  void * jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  cricket::SessionDescription *result = 0 ;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  result = (cricket::SessionDescription *)((webrtc::SessionDescriptionInterface const *)arg1)->description();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_session_id___(void * jarg1) {
  const char * jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  std::string result;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  result = ((webrtc::SessionDescriptionInterface const *)arg1)->session_id();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_session_version___(void * jarg1) {
  const char * jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  std::string result;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  result = ((webrtc::SessionDescriptionInterface const *)arg1)->session_version();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_GetType___(void * jarg1) {
  int jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  webrtc::SdpType result;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  result = (webrtc::SdpType)((webrtc::SessionDescriptionInterface const *)arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_type___(void * jarg1) {
  const char * jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  std::string result;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  result = ((webrtc::SessionDescriptionInterface const *)arg1)->type();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_AddCandidate___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  webrtc::IceCandidateInterface *arg2 = (webrtc::IceCandidateInterface *) 0 ;
  bool result;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  arg2 = (webrtc::IceCandidateInterface *)jarg2; 
  result = (bool)(arg1)->AddCandidate((webrtc::IceCandidateInterface const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_RemoveCandidates___(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  std::vector< cricket::Candidate > *arg2 = 0 ;
  size_t result;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  arg2 = (std::vector< cricket::Candidate > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< cricket::Candidate > const & is null", 0);
    return 0;
  } 
  result = (arg1)->RemoveCandidates((std::vector< cricket::Candidate > const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_number_of_mediasections___(void * jarg1) {
  unsigned long jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  size_t result;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  result = ((webrtc::SessionDescriptionInterface const *)arg1)->number_of_mediasections();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_candidates___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  size_t arg2 ;
  webrtc::IceCandidateCollection *result = 0 ;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (webrtc::IceCandidateCollection *)((webrtc::SessionDescriptionInterface const *)arg1)->candidates(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SessionDescriptionInterface_ToString___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::SessionDescriptionInterface *arg1 = (webrtc::SessionDescriptionInterface *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  arg1 = (webrtc::SessionDescriptionInterface *)jarg1; 
  arg2 = (std::string *)jarg2; 
  result = (bool)((webrtc::SessionDescriptionInterface const *)arg1)->ToString(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_CreateSessionDescription__SWIG_0___(const char * jarg1, const char * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  webrtc::SdpParseError *arg3 = (webrtc::SdpParseError *) 0 ;
  webrtc::SessionDescriptionInterface *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (webrtc::SdpParseError *)jarg3; 
  result = (webrtc::SessionDescriptionInterface *)webrtc::CreateSessionDescription((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_CreateSessionDescription__SWIG_1___(int jarg1, const char * jarg2) {
  void * jresult ;
  webrtc::SdpType arg1 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::unique_ptr< webrtc::SessionDescriptionInterface > > result;
  
  arg1 = (webrtc::SdpType)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = webrtc::CreateSessionDescription(arg1,(std::string const &)*arg2);
  jresult = new std::unique_ptr< webrtc::SessionDescriptionInterface >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_CreateSessionDescription__SWIG_2___(int jarg1, const char * jarg2, void * jarg3) {
  void * jresult ;
  webrtc::SdpType arg1 ;
  std::string *arg2 = 0 ;
  webrtc::SdpParseError *arg3 = (webrtc::SdpParseError *) 0 ;
  SwigValueWrapper< std::unique_ptr< webrtc::SessionDescriptionInterface > > result;
  
  arg1 = (webrtc::SdpType)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (webrtc::SdpParseError *)jarg3; 
  result = webrtc::CreateSessionDescription(arg1,(std::string const &)*arg2,arg3);
  jresult = new std::unique_ptr< webrtc::SessionDescriptionInterface >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_CreateSessionDescription__SWIG_3___(int jarg1, const char * jarg2, const char * jarg3, void * jarg4) {
  void * jresult ;
  webrtc::SdpType arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< std::unique_ptr< cricket::SessionDescription > > arg4 ;
  std::unique_ptr< cricket::SessionDescription > *argp4 ;
  SwigValueWrapper< std::unique_ptr< webrtc::SessionDescriptionInterface > > result;
  
  arg1 = (webrtc::SdpType)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  argp4 = (std::unique_ptr< cricket::SessionDescription > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::unique_ptr< cricket::SessionDescription >", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = webrtc::CreateSessionDescription(arg1,(std::string const &)*arg2,(std::string const &)*arg3,SWIG_STD_MOVE(arg4));
  jresult = new std::unique_ptr< webrtc::SessionDescriptionInterface >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_CreateSessionDescriptionObserver_OnSuccess___(void * jarg1, void * jarg2) {
  webrtc::CreateSessionDescriptionObserver *arg1 = (webrtc::CreateSessionDescriptionObserver *) 0 ;
  webrtc::SessionDescriptionInterface *arg2 = (webrtc::SessionDescriptionInterface *) 0 ;
  
  arg1 = (webrtc::CreateSessionDescriptionObserver *)jarg1; 
  arg2 = (webrtc::SessionDescriptionInterface *)jarg2; 
  (arg1)->OnSuccess(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_CreateSessionDescriptionObserver_OnFailure___(void * jarg1, void * jarg2) {
  webrtc::CreateSessionDescriptionObserver *arg1 = (webrtc::CreateSessionDescriptionObserver *) 0 ;
  webrtc::RTCError arg2 ;
  webrtc::RTCError *argp2 ;
  
  arg1 = (webrtc::CreateSessionDescriptionObserver *)jarg1; 
  argp2 = (webrtc::RTCError *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null webrtc::RTCError", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnFailure(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SetSessionDescriptionObserver_OnSuccess___(void * jarg1) {
  webrtc::SetSessionDescriptionObserver *arg1 = (webrtc::SetSessionDescriptionObserver *) 0 ;
  
  arg1 = (webrtc::SetSessionDescriptionObserver *)jarg1; 
  (arg1)->OnSuccess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SetSessionDescriptionObserver_OnFailure___(void * jarg1, void * jarg2) {
  webrtc::SetSessionDescriptionObserver *arg1 = (webrtc::SetSessionDescriptionObserver *) 0 ;
  webrtc::RTCError arg2 ;
  webrtc::RTCError *argp2 ;
  
  arg1 = (webrtc::SetSessionDescriptionObserver *)jarg1; 
  argp2 = (webrtc::RTCError *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null webrtc::RTCError", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnFailure(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_RTCStatsCollectorCallback___(void * jarg1) {
  webrtc::RTCStatsCollectorCallback *arg1 = (webrtc::RTCStatsCollectorCallback *) 0 ;
  
  arg1 = (webrtc::RTCStatsCollectorCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCStatsCollectorCallback_OnStatsDelivered___(void * jarg1, void * jarg2) {
  webrtc::RTCStatsCollectorCallback *arg1 = (webrtc::RTCStatsCollectorCallback *) 0 ;
  rtc::scoped_refptr< RTCStatsReport const > *arg2 = 0 ;
  
  arg1 = (webrtc::RTCStatsCollectorCallback *)jarg1; 
  arg2 = (rtc::scoped_refptr< RTCStatsReport const > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtc::scoped_refptr< RTCStatsReport const > const & is null", 0);
    return ;
  } 
  (arg1)->OnStatsDelivered((rtc::scoped_refptr< RTCStatsReport const > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AntelcatfMediasoupClient_StreamCollectionInterface_count___(void * jarg1) {
  unsigned long jresult ;
  webrtc::StreamCollectionInterface *arg1 = (webrtc::StreamCollectionInterface *) 0 ;
  size_t result;
  
  arg1 = (webrtc::StreamCollectionInterface *)jarg1; 
  result = (arg1)->count();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_StreamCollectionInterface_at___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  webrtc::StreamCollectionInterface *arg1 = (webrtc::StreamCollectionInterface *) 0 ;
  size_t arg2 ;
  MediaStreamInterface *result = 0 ;
  
  arg1 = (webrtc::StreamCollectionInterface *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (MediaStreamInterface *)(arg1)->at(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_StreamCollectionInterface_find___(void * jarg1, const char * jarg2) {
  void * jresult ;
  webrtc::StreamCollectionInterface *arg1 = (webrtc::StreamCollectionInterface *) 0 ;
  std::string *arg2 = 0 ;
  MediaStreamInterface *result = 0 ;
  
  arg1 = (webrtc::StreamCollectionInterface *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (MediaStreamInterface *)(arg1)->find((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_StreamCollectionInterface_FindAudioTrack___(void * jarg1, const char * jarg2) {
  void * jresult ;
  webrtc::StreamCollectionInterface *arg1 = (webrtc::StreamCollectionInterface *) 0 ;
  std::string *arg2 = 0 ;
  MediaStreamTrackInterface *result = 0 ;
  
  arg1 = (webrtc::StreamCollectionInterface *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (MediaStreamTrackInterface *)(arg1)->FindAudioTrack((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_StreamCollectionInterface_FindVideoTrack___(void * jarg1, const char * jarg2) {
  void * jresult ;
  webrtc::StreamCollectionInterface *arg1 = (webrtc::StreamCollectionInterface *) 0 ;
  std::string *arg2 = 0 ;
  MediaStreamTrackInterface *result = 0 ;
  
  arg1 = (webrtc::StreamCollectionInterface *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (MediaStreamTrackInterface *)(arg1)->FindVideoTrack((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_StatsObserver_OnComplete___(void * jarg1, void * jarg2) {
  webrtc::StatsObserver *arg1 = (webrtc::StatsObserver *) 0 ;
  StatsReports *arg2 = 0 ;
  
  arg1 = (webrtc::StatsObserver *)jarg1; 
  arg2 = (StatsReports *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StatsReports const & is null", 0);
    return ;
  } 
  (arg1)->OnComplete((StatsReports const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_PeerConnectionInterface_IceServer__SWIG_0___() {
  void * jresult ;
  webrtc::PeerConnectionInterface::IceServer *result = 0 ;
  
  result = (webrtc::PeerConnectionInterface::IceServer *)new webrtc::PeerConnectionInterface::IceServer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_PeerConnectionInterface_IceServer__SWIG_1___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = 0 ;
  webrtc::PeerConnectionInterface::IceServer *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::IceServer const & is null", 0);
    return 0;
  } 
  result = (webrtc::PeerConnectionInterface::IceServer *)new webrtc::PeerConnectionInterface::IceServer((webrtc::PeerConnectionInterface::IceServer const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnectionInterface_IceServer___(void * jarg1) {
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_uri_set___(void * jarg1, const char * jarg2) {
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_uri_get___(void * jarg1) {
  const char * jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  result = (std::string *) & ((arg1)->uri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_urls_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->urls = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_urls_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->urls);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_username_set___(void * jarg1, const char * jarg2) {
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_username_get___(void * jarg1) {
  const char * jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_password_set___(void * jarg1, const char * jarg2) {
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->password = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_password_get___(void * jarg1) {
  const char * jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  result = (std::string *) & ((arg1)->password);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_tls_cert_policy_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  webrtc::PeerConnectionInterface::TlsCertPolicy arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::TlsCertPolicy)jarg2; 
  if (arg1) (arg1)->tls_cert_policy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_tls_cert_policy_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  webrtc::PeerConnectionInterface::TlsCertPolicy result;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  result = (webrtc::PeerConnectionInterface::TlsCertPolicy) ((arg1)->tls_cert_policy);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_hostname_set___(void * jarg1, const char * jarg2) {
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->hostname = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_hostname_get___(void * jarg1) {
  const char * jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  result = (std::string *) & ((arg1)->hostname);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_tls_alpn_protocols_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->tls_alpn_protocols = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_tls_alpn_protocols_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->tls_alpn_protocols);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_tls_elliptic_curves_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->tls_elliptic_curves = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_tls_elliptic_curves_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->tls_elliptic_curves);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_IceServer_Equals___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::IceServer *arg1 = (webrtc::PeerConnectionInterface::IceServer *) 0 ;
  webrtc::PeerConnectionInterface::IceServer *arg2 = 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::IceServer *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::IceServer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::IceServer const & is null", 0);
    return 0;
  } 
  result = (bool)((webrtc::PeerConnectionInterface::IceServer const *)arg1)->Equals((webrtc::PeerConnectionInterface::IceServer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_PeerConnectionInterface_RTCConfiguration__SWIG_0___() {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *result = 0 ;
  
  result = (webrtc::PeerConnectionInterface::RTCConfiguration *)new webrtc::PeerConnectionInterface::RTCConfiguration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_PeerConnectionInterface_RTCConfiguration__SWIG_1___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = 0 ;
  webrtc::PeerConnectionInterface::RTCConfiguration *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::RTCConfiguration const & is null", 0);
    return 0;
  } 
  result = (webrtc::PeerConnectionInterface::RTCConfiguration *)new webrtc::PeerConnectionInterface::RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_PeerConnectionInterface_RTCConfiguration__SWIG_2___(int jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfigurationType arg1 ;
  webrtc::PeerConnectionInterface::RTCConfiguration *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfigurationType)jarg1; 
  result = (webrtc::PeerConnectionInterface::RTCConfiguration *)new webrtc::PeerConnectionInterface::RTCConfiguration(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnectionInterface_RTCConfiguration___(void * jarg1) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_Equals___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg2 = 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::RTCConfiguration const & is null", 0);
    return 0;
  } 
  result = (bool)((webrtc::PeerConnectionInterface::RTCConfiguration const *)arg1)->Equals((webrtc::PeerConnectionInterface::RTCConfiguration const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_dscp___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool)((webrtc::PeerConnectionInterface::RTCConfiguration const *)arg1)->dscp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_set_dscp___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_dscp(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_cpu_adaptation___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool)((webrtc::PeerConnectionInterface::RTCConfiguration const *)arg1)->cpu_adaptation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_set_cpu_adaptation___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_cpu_adaptation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_suspend_below_min_bitrate___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool)((webrtc::PeerConnectionInterface::RTCConfiguration const *)arg1)->suspend_below_min_bitrate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_set_suspend_below_min_bitrate___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_suspend_below_min_bitrate(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_prerenderer_smoothing___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool)((webrtc::PeerConnectionInterface::RTCConfiguration const *)arg1)->prerenderer_smoothing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_set_prerenderer_smoothing___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_prerenderer_smoothing(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_experiment_cpu_load_estimator___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool)((webrtc::PeerConnectionInterface::RTCConfiguration const *)arg1)->experiment_cpu_load_estimator();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_set_experiment_cpu_load_estimator___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_experiment_cpu_load_estimator(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_audio_rtcp_report_interval_ms___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (int)((webrtc::PeerConnectionInterface::RTCConfiguration const *)arg1)->audio_rtcp_report_interval_ms();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_set_audio_rtcp_report_interval_ms___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_audio_rtcp_report_interval_ms(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_video_rtcp_report_interval_ms___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (int)((webrtc::PeerConnectionInterface::RTCConfiguration const *)arg1)->video_rtcp_report_interval_ms();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_set_video_rtcp_report_interval_ms___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_video_rtcp_report_interval_ms(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_kUndefined_get___() {
  int jresult ;
  int result;
  
  result = (int)webrtc::PeerConnectionInterface::RTCConfiguration::kUndefined;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_kAudioJitterBufferMaxPackets_get___() {
  int jresult ;
  int result;
  
  result = (int)webrtc::PeerConnectionInterface::RTCConfiguration::kAudioJitterBufferMaxPackets;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_kAggressiveIceConnectionReceivingTimeout_get___() {
  int jresult ;
  int result;
  
  result = (int)webrtc::PeerConnectionInterface::RTCConfiguration::kAggressiveIceConnectionReceivingTimeout;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_servers_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::IceServers *arg2 = (webrtc::PeerConnectionInterface::IceServers *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::IceServers *)jarg2; 
  if (arg1) (arg1)->servers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_servers_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::IceServers *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (webrtc::PeerConnectionInterface::IceServers *)& ((arg1)->servers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_type_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::IceTransportsType arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::IceTransportsType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_type_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::IceTransportsType result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (webrtc::PeerConnectionInterface::IceTransportsType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_bundle_policy_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::BundlePolicy arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::BundlePolicy)jarg2; 
  if (arg1) (arg1)->bundle_policy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_bundle_policy_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::BundlePolicy result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (webrtc::PeerConnectionInterface::BundlePolicy) ((arg1)->bundle_policy);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_rtcp_mux_policy_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::RtcpMuxPolicy arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::RtcpMuxPolicy)jarg2; 
  if (arg1) (arg1)->rtcp_mux_policy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_rtcp_mux_policy_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::RtcpMuxPolicy result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (webrtc::PeerConnectionInterface::RtcpMuxPolicy) ((arg1)->rtcp_mux_policy);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_certificates_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  std::vector< rtc::scoped_refptr< rtc::RTCCertificate > > *arg2 = (std::vector< rtc::scoped_refptr< rtc::RTCCertificate > > *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (std::vector< rtc::scoped_refptr< rtc::RTCCertificate > > *)jarg2; 
  if (arg1) (arg1)->certificates = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_certificates_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  std::vector< rtc::scoped_refptr< rtc::RTCCertificate > > *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (std::vector< rtc::scoped_refptr< rtc::RTCCertificate > > *)& ((arg1)->certificates);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_candidate_pool_size_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ice_candidate_pool_size = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_candidate_pool_size_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (int) ((arg1)->ice_candidate_pool_size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_disable_ipv6_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disable_ipv6 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_disable_ipv6_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->disable_ipv6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_disable_ipv6_on_wifi_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disable_ipv6_on_wifi = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_disable_ipv6_on_wifi_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->disable_ipv6_on_wifi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_max_ipv6_networks_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_ipv6_networks = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_max_ipv6_networks_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (int) ((arg1)->max_ipv6_networks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_disable_link_local_networks_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disable_link_local_networks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_disable_link_local_networks_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->disable_link_local_networks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_screencast_min_bitrate_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->screencast_min_bitrate = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_screencast_min_bitrate_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->screencast_min_bitrate);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_combined_audio_video_bwe_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< bool > arg2 ;
  absl::optional< bool > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  argp2 = (absl::optional< bool > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null absl::optional< bool >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->combined_audio_video_bwe = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_combined_audio_video_bwe_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< bool > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->combined_audio_video_bwe);
  jresult = new absl::optional< bool >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_enable_dtls_srtp_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< bool > arg2 ;
  absl::optional< bool > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  argp2 = (absl::optional< bool > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null absl::optional< bool >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->enable_dtls_srtp = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_enable_dtls_srtp_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< bool > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->enable_dtls_srtp);
  jresult = new absl::optional< bool >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_tcp_candidate_policy_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::TcpCandidatePolicy arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::TcpCandidatePolicy)jarg2; 
  if (arg1) (arg1)->tcp_candidate_policy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_tcp_candidate_policy_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::TcpCandidatePolicy result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (webrtc::PeerConnectionInterface::TcpCandidatePolicy) ((arg1)->tcp_candidate_policy);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_candidate_network_policy_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::CandidateNetworkPolicy arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::CandidateNetworkPolicy)jarg2; 
  if (arg1) (arg1)->candidate_network_policy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_candidate_network_policy_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::CandidateNetworkPolicy result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (webrtc::PeerConnectionInterface::CandidateNetworkPolicy) ((arg1)->candidate_network_policy);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_audio_jitter_buffer_max_packets_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->audio_jitter_buffer_max_packets = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_audio_jitter_buffer_max_packets_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (int) ((arg1)->audio_jitter_buffer_max_packets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_audio_jitter_buffer_fast_accelerate_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->audio_jitter_buffer_fast_accelerate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_audio_jitter_buffer_fast_accelerate_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->audio_jitter_buffer_fast_accelerate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_audio_jitter_buffer_min_delay_ms_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->audio_jitter_buffer_min_delay_ms = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_audio_jitter_buffer_min_delay_ms_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (int) ((arg1)->audio_jitter_buffer_min_delay_ms);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_audio_jitter_buffer_enable_rtx_handling_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->audio_jitter_buffer_enable_rtx_handling = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_audio_jitter_buffer_enable_rtx_handling_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->audio_jitter_buffer_enable_rtx_handling);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_connection_receiving_timeout_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ice_connection_receiving_timeout = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_connection_receiving_timeout_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (int) ((arg1)->ice_connection_receiving_timeout);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_backup_candidate_pair_ping_interval_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ice_backup_candidate_pair_ping_interval = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_backup_candidate_pair_ping_interval_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (int) ((arg1)->ice_backup_candidate_pair_ping_interval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_continual_gathering_policy_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::ContinualGatheringPolicy arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::ContinualGatheringPolicy)jarg2; 
  if (arg1) (arg1)->continual_gathering_policy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_continual_gathering_policy_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::PeerConnectionInterface::ContinualGatheringPolicy result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (webrtc::PeerConnectionInterface::ContinualGatheringPolicy) ((arg1)->continual_gathering_policy);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_prioritize_most_likely_ice_candidate_pairs_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->prioritize_most_likely_ice_candidate_pairs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_prioritize_most_likely_ice_candidate_pairs_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->prioritize_most_likely_ice_candidate_pairs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_media_config_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  cricket::MediaConfig arg2 ;
  cricket::MediaConfig *argp2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  argp2 = (cricket::MediaConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cricket::MediaConfig", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->media_config = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_media_config_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  cricket::MediaConfig result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->media_config);
  jresult = new cricket::MediaConfig(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_prune_turn_ports_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->prune_turn_ports = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_prune_turn_ports_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->prune_turn_ports);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_turn_port_prune_policy_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  PortPrunePolicy arg2 ;
  PortPrunePolicy *argp2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  argp2 = (PortPrunePolicy *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PortPrunePolicy", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->turn_port_prune_policy = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_turn_port_prune_policy_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  PortPrunePolicy result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->turn_port_prune_policy);
  jresult = new PortPrunePolicy(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_GetTurnPortPrunePolicy___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  PortPrunePolicy result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = ((webrtc::PeerConnectionInterface::RTCConfiguration const *)arg1)->GetTurnPortPrunePolicy();
  jresult = new PortPrunePolicy(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_presume_writable_when_fully_relayed_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->presume_writable_when_fully_relayed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_presume_writable_when_fully_relayed_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->presume_writable_when_fully_relayed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_enable_ice_renomination_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enable_ice_renomination = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_enable_ice_renomination_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->enable_ice_renomination);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_redetermine_role_on_ice_restart_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->redetermine_role_on_ice_restart = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_redetermine_role_on_ice_restart_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->redetermine_role_on_ice_restart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_surface_ice_candidates_on_ice_transport_type_changed_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->surface_ice_candidates_on_ice_transport_type_changed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_surface_ice_candidates_on_ice_transport_type_changed_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->surface_ice_candidates_on_ice_transport_type_changed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_check_interval_strong_connectivity_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->ice_check_interval_strong_connectivity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_check_interval_strong_connectivity_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->ice_check_interval_strong_connectivity);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_check_interval_weak_connectivity_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->ice_check_interval_weak_connectivity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_check_interval_weak_connectivity_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->ice_check_interval_weak_connectivity);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_check_min_interval_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->ice_check_min_interval = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_check_min_interval_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->ice_check_min_interval);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_unwritable_timeout_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->ice_unwritable_timeout = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_unwritable_timeout_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->ice_unwritable_timeout);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_unwritable_min_checks_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->ice_unwritable_min_checks = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_unwritable_min_checks_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->ice_unwritable_min_checks);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_inactive_timeout_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->ice_inactive_timeout = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_ice_inactive_timeout_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->ice_inactive_timeout);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_stun_candidate_keepalive_interval_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->stun_candidate_keepalive_interval = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_stun_candidate_keepalive_interval_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->stun_candidate_keepalive_interval);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_turn_customizer_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::TurnCustomizer *arg2 = (webrtc::TurnCustomizer *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::TurnCustomizer *)jarg2; 
  if (arg1) (arg1)->turn_customizer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_turn_customizer_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::TurnCustomizer *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (webrtc::TurnCustomizer *) ((arg1)->turn_customizer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_network_preference_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< rtc::AdapterType > arg2 ;
  absl::optional< rtc::AdapterType > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  argp2 = (absl::optional< rtc::AdapterType > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null absl::optional< rtc::AdapterType >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->network_preference = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_network_preference_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< rtc::AdapterType > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->network_preference);
  jresult = new absl::optional< rtc::AdapterType >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_sdp_semantics_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::SdpSemantics arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = (webrtc::SdpSemantics)jarg2; 
  if (arg1) (arg1)->sdp_semantics = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_sdp_semantics_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  webrtc::SdpSemantics result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (webrtc::SdpSemantics) ((arg1)->sdp_semantics);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_active_reset_srtp_params_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->active_reset_srtp_params = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_active_reset_srtp_params_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->active_reset_srtp_params);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_crypto_options_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< CryptoOptions > arg2 ;
  absl::optional< CryptoOptions > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  argp2 = (absl::optional< CryptoOptions > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null absl::optional< CryptoOptions >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->crypto_options = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_crypto_options_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< CryptoOptions > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->crypto_options);
  jresult = new absl::optional< CryptoOptions >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_offer_extmap_allow_mixed_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->offer_extmap_allow_mixed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_offer_extmap_allow_mixed_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->offer_extmap_allow_mixed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_turn_logging_id_set___(void * jarg1, const char * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->turn_logging_id = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_turn_logging_id_get___(void * jarg1) {
  const char * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (std::string *) & ((arg1)->turn_logging_id);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_enable_implicit_rollback_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enable_implicit_rollback = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_enable_implicit_rollback_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result = (bool) ((arg1)->enable_implicit_rollback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_allow_codec_switching_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< bool > arg2 ;
  absl::optional< bool > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  argp2 = (absl::optional< bool > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null absl::optional< bool >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->allow_codec_switching = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_allow_codec_switching_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< bool > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->allow_codec_switching);
  jresult = new absl::optional< bool >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_report_usage_pattern_delay_ms_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->report_usage_pattern_delay_ms = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_report_usage_pattern_delay_ms_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->report_usage_pattern_delay_ms);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_stable_writable_connection_ping_interval_ms_set___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  {
    if (!$csinput.HasValue)
    arg2 = absl::optional::nullopt;
    else
    arg2 = absl::optional($csinput.Value);
  }
  if (arg1) (arg1)->stable_writable_connection_ping_interval_ms = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCConfiguration_stable_writable_connection_ping_interval_ms_get___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  absl::optional< int > result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg1; 
  result =  ((arg1)->stable_writable_connection_ping_interval_ms);
  jresult = new absl::optional< int >(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_kUndefined_get___() {
  int jresult ;
  int result;
  
  result = (int)webrtc::PeerConnectionInterface::RTCOfferAnswerOptions::kUndefined;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_kMaxOfferToReceiveMedia_get___() {
  int jresult ;
  int result;
  
  result = (int)webrtc::PeerConnectionInterface::RTCOfferAnswerOptions::kMaxOfferToReceiveMedia;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_kOfferToReceiveMediaTrue_get___() {
  int jresult ;
  int result;
  
  result = (int)webrtc::PeerConnectionInterface::RTCOfferAnswerOptions::kOfferToReceiveMediaTrue;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_offer_to_receive_video_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->offer_to_receive_video = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_offer_to_receive_video_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  result = (int) ((arg1)->offer_to_receive_video);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_offer_to_receive_audio_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->offer_to_receive_audio = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_offer_to_receive_audio_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  result = (int) ((arg1)->offer_to_receive_audio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_voice_activity_detection_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->voice_activity_detection = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_voice_activity_detection_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  result = (bool) ((arg1)->voice_activity_detection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_ice_restart_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ice_restart = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_ice_restart_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  result = (bool) ((arg1)->ice_restart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_use_rtp_mux_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->use_rtp_mux = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_use_rtp_mux_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  result = (bool) ((arg1)->use_rtp_mux);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_raw_packetization_for_video_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->raw_packetization_for_video = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_raw_packetization_for_video_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  result = (bool) ((arg1)->raw_packetization_for_video);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_num_simulcast_layers_set___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_simulcast_layers = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_num_simulcast_layers_get___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  int result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  result = (int) ((arg1)->num_simulcast_layers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_use_obsolete_sctp_sdp_set___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->use_obsolete_sctp_sdp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RTCOfferAnswerOptions_use_obsolete_sctp_sdp_get___(void * jarg1) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  result = (bool) ((arg1)->use_obsolete_sctp_sdp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_PeerConnectionInterface_RTCOfferAnswerOptions__SWIG_0___() {
  void * jresult ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *result = 0 ;
  
  result = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)new webrtc::PeerConnectionInterface::RTCOfferAnswerOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_PeerConnectionInterface_RTCOfferAnswerOptions__SWIG_1___(int jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)new webrtc::PeerConnectionInterface::RTCOfferAnswerOptions(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnectionInterface_RTCOfferAnswerOptions___(void * jarg1) {
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_local_streams___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< rtc::scoped_refptr< webrtc::StreamCollectionInterface > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (arg1)->local_streams();
  jresult = new rtc::scoped_refptr< webrtc::StreamCollectionInterface >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_remote_streams___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< rtc::scoped_refptr< webrtc::StreamCollectionInterface > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (arg1)->remote_streams();
  jresult = new rtc::scoped_refptr< webrtc::StreamCollectionInterface >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_AddStream___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  MediaStreamInterface *arg2 = (MediaStreamInterface *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (MediaStreamInterface *)jarg2; 
  result = (bool)(arg1)->AddStream(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RemoveStream___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  MediaStreamInterface *arg2 = (MediaStreamInterface *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (MediaStreamInterface *)jarg2; 
  (arg1)->RemoveStream(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_AddTrack___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::scoped_refptr< MediaStreamTrackInterface > arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  rtc::scoped_refptr< MediaStreamTrackInterface > *argp2 ;
  RTCErrorOr< rtc::scoped_refptr< RtpSenderInterface > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (rtc::scoped_refptr< MediaStreamTrackInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< MediaStreamTrackInterface >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (arg1)->AddTrack(arg2,(std::vector< std::string > const &)*arg3);
  jresult = new RTCErrorOr< rtc::scoped_refptr< RtpSenderInterface > >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RemoveTrack___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  RtpSenderInterface *arg2 = (RtpSenderInterface *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (RtpSenderInterface *)jarg2; 
  result = (bool)(arg1)->RemoveTrack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RemoveTrackNew___(void * jarg1, void * jarg2) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::scoped_refptr< RtpSenderInterface > arg2 ;
  rtc::scoped_refptr< RtpSenderInterface > *argp2 ;
  webrtc::RTCError result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (rtc::scoped_refptr< RtpSenderInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< RtpSenderInterface >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->RemoveTrackNew(arg2);
  jresult = new webrtc::RTCError(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_AddTransceiver__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::scoped_refptr< MediaStreamTrackInterface > arg2 ;
  rtc::scoped_refptr< MediaStreamTrackInterface > *argp2 ;
  RTCErrorOr< rtc::scoped_refptr< RtpTransceiverInterface > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (rtc::scoped_refptr< MediaStreamTrackInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< MediaStreamTrackInterface >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->AddTransceiver(arg2);
  jresult = new RTCErrorOr< rtc::scoped_refptr< RtpTransceiverInterface > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_AddTransceiver__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::scoped_refptr< MediaStreamTrackInterface > arg2 ;
  RtpTransceiverInit *arg3 = 0 ;
  rtc::scoped_refptr< MediaStreamTrackInterface > *argp2 ;
  RTCErrorOr< rtc::scoped_refptr< RtpTransceiverInterface > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (rtc::scoped_refptr< MediaStreamTrackInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< MediaStreamTrackInterface >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (RtpTransceiverInit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RtpTransceiverInit const & is null", 0);
    return 0;
  } 
  result = (arg1)->AddTransceiver(arg2,(RtpTransceiverInit const &)*arg3);
  jresult = new RTCErrorOr< rtc::scoped_refptr< RtpTransceiverInterface > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_AddTransceiver__SWIG_2___(void * jarg1, void * jarg2) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  cricket::MediaType arg2 ;
  cricket::MediaType *argp2 ;
  RTCErrorOr< rtc::scoped_refptr< RtpTransceiverInterface > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (cricket::MediaType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cricket::MediaType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->AddTransceiver(arg2);
  jresult = new RTCErrorOr< rtc::scoped_refptr< RtpTransceiverInterface > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_AddTransceiver__SWIG_3___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  cricket::MediaType arg2 ;
  RtpTransceiverInit *arg3 = 0 ;
  cricket::MediaType *argp2 ;
  RTCErrorOr< rtc::scoped_refptr< RtpTransceiverInterface > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (cricket::MediaType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cricket::MediaType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (RtpTransceiverInit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RtpTransceiverInit const & is null", 0);
    return 0;
  } 
  result = (arg1)->AddTransceiver(arg2,(RtpTransceiverInit const &)*arg3);
  jresult = new RTCErrorOr< rtc::scoped_refptr< RtpTransceiverInterface > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_CreateSender___(void * jarg1, const char * jarg2, const char * jarg3) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  rtc::scoped_refptr< RtpSenderInterface > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (arg1)->CreateSender((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = new rtc::scoped_refptr< RtpSenderInterface >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_GetSenders___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< std::vector< rtc::scoped_refptr< RtpSenderInterface > > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = ((webrtc::PeerConnectionInterface const *)arg1)->GetSenders();
  jresult = new std::vector< rtc::scoped_refptr< RtpSenderInterface > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_GetReceivers___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< std::vector< rtc::scoped_refptr< RtpReceiverInterface > > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = ((webrtc::PeerConnectionInterface const *)arg1)->GetReceivers();
  jresult = new std::vector< rtc::scoped_refptr< RtpReceiverInterface > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_GetTransceivers___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< std::vector< rtc::scoped_refptr< RtpTransceiverInterface > > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = ((webrtc::PeerConnectionInterface const *)arg1)->GetTransceivers();
  jresult = new std::vector< rtc::scoped_refptr< RtpTransceiverInterface > >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_GetStats__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::StatsObserver *arg2 = (webrtc::StatsObserver *) 0 ;
  MediaStreamTrackInterface *arg3 = (MediaStreamTrackInterface *) 0 ;
  webrtc::PeerConnectionInterface::StatsOutputLevel arg4 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (webrtc::StatsObserver *)jarg2; 
  arg3 = (MediaStreamTrackInterface *)jarg3; 
  arg4 = (webrtc::PeerConnectionInterface::StatsOutputLevel)jarg4; 
  result = (bool)(arg1)->GetStats(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_GetStats__SWIG_1___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::RTCStatsCollectorCallback *arg2 = (webrtc::RTCStatsCollectorCallback *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (webrtc::RTCStatsCollectorCallback *)jarg2; 
  (arg1)->GetStats(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_GetStats__SWIG_2___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::scoped_refptr< RtpSenderInterface > arg2 ;
  SwigValueWrapper< rtc::scoped_refptr< webrtc::RTCStatsCollectorCallback > > arg3 ;
  rtc::scoped_refptr< RtpSenderInterface > *argp2 ;
  rtc::scoped_refptr< webrtc::RTCStatsCollectorCallback > *argp3 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (rtc::scoped_refptr< RtpSenderInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< RtpSenderInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (rtc::scoped_refptr< webrtc::RTCStatsCollectorCallback > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::RTCStatsCollectorCallback >", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->GetStats(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_GetStats__SWIG_3___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::scoped_refptr< RtpReceiverInterface > arg2 ;
  SwigValueWrapper< rtc::scoped_refptr< webrtc::RTCStatsCollectorCallback > > arg3 ;
  rtc::scoped_refptr< RtpReceiverInterface > *argp2 ;
  rtc::scoped_refptr< webrtc::RTCStatsCollectorCallback > *argp3 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (rtc::scoped_refptr< RtpReceiverInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< RtpReceiverInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (rtc::scoped_refptr< webrtc::RTCStatsCollectorCallback > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::RTCStatsCollectorCallback >", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->GetStats(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_ClearStatsCache___(void * jarg1) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  (arg1)->ClearStatsCache();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_CreateDataChannelOrError___(void * jarg1, const char * jarg2, void * jarg3) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  std::string *arg2 = 0 ;
  DataChannelInit *arg3 = (DataChannelInit *) 0 ;
  RTCErrorOr< rtc::scoped_refptr< DataChannelInterface > > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (DataChannelInit *)jarg3; 
  result = (arg1)->CreateDataChannelOrError((std::string const &)*arg2,(DataChannelInit const *)arg3);
  jresult = new RTCErrorOr< rtc::scoped_refptr< DataChannelInterface > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_local_description___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::SessionDescriptionInterface *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::SessionDescriptionInterface *)((webrtc::PeerConnectionInterface const *)arg1)->local_description();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_remote_description___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::SessionDescriptionInterface *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::SessionDescriptionInterface *)((webrtc::PeerConnectionInterface const *)arg1)->remote_description();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_current_local_description___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::SessionDescriptionInterface *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::SessionDescriptionInterface *)((webrtc::PeerConnectionInterface const *)arg1)->current_local_description();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_current_remote_description___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::SessionDescriptionInterface *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::SessionDescriptionInterface *)((webrtc::PeerConnectionInterface const *)arg1)->current_remote_description();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_pending_local_description___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::SessionDescriptionInterface *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::SessionDescriptionInterface *)((webrtc::PeerConnectionInterface const *)arg1)->pending_local_description();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_pending_remote_description___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::SessionDescriptionInterface *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::SessionDescriptionInterface *)((webrtc::PeerConnectionInterface const *)arg1)->pending_remote_description();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RestartIce___(void * jarg1) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  (arg1)->RestartIce();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_CreateOffer___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::CreateSessionDescriptionObserver *arg2 = (webrtc::CreateSessionDescriptionObserver *) 0 ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg3 = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (webrtc::CreateSessionDescriptionObserver *)jarg2; 
  arg3 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const & is null", 0);
    return ;
  } 
  (arg1)->CreateOffer(arg2,(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_CreateAnswer___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::CreateSessionDescriptionObserver *arg2 = (webrtc::CreateSessionDescriptionObserver *) 0 ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg3 = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (webrtc::CreateSessionDescriptionObserver *)jarg2; 
  arg3 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const & is null", 0);
    return ;
  } 
  (arg1)->CreateAnswer(arg2,(webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetLocalDescription__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< std::unique_ptr< webrtc::SessionDescriptionInterface > > arg2 ;
  rtc::scoped_refptr< SetLocalDescriptionObserverInterface > arg3 ;
  std::unique_ptr< webrtc::SessionDescriptionInterface > *argp2 ;
  rtc::scoped_refptr< SetLocalDescriptionObserverInterface > *argp3 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (std::unique_ptr< webrtc::SessionDescriptionInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::unique_ptr< webrtc::SessionDescriptionInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (rtc::scoped_refptr< SetLocalDescriptionObserverInterface > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< SetLocalDescriptionObserverInterface >", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetLocalDescription(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetLocalDescription__SWIG_1___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::scoped_refptr< SetLocalDescriptionObserverInterface > arg2 ;
  rtc::scoped_refptr< SetLocalDescriptionObserverInterface > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (rtc::scoped_refptr< SetLocalDescriptionObserverInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< SetLocalDescriptionObserverInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetLocalDescription(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetLocalDescription__SWIG_2___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::SetSessionDescriptionObserver *arg2 = (webrtc::SetSessionDescriptionObserver *) 0 ;
  webrtc::SessionDescriptionInterface *arg3 = (webrtc::SessionDescriptionInterface *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (webrtc::SetSessionDescriptionObserver *)jarg2; 
  arg3 = (webrtc::SessionDescriptionInterface *)jarg3; 
  (arg1)->SetLocalDescription(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetLocalDescription__SWIG_3___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::SetSessionDescriptionObserver *arg2 = (webrtc::SetSessionDescriptionObserver *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (webrtc::SetSessionDescriptionObserver *)jarg2; 
  (arg1)->SetLocalDescription(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetRemoteDescription__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< std::unique_ptr< webrtc::SessionDescriptionInterface > > arg2 ;
  rtc::scoped_refptr< SetRemoteDescriptionObserverInterface > arg3 ;
  std::unique_ptr< webrtc::SessionDescriptionInterface > *argp2 ;
  rtc::scoped_refptr< SetRemoteDescriptionObserverInterface > *argp3 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (std::unique_ptr< webrtc::SessionDescriptionInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::unique_ptr< webrtc::SessionDescriptionInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (rtc::scoped_refptr< SetRemoteDescriptionObserverInterface > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< SetRemoteDescriptionObserverInterface >", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetRemoteDescription(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetRemoteDescription__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::SetSessionDescriptionObserver *arg2 = (webrtc::SetSessionDescriptionObserver *) 0 ;
  webrtc::SessionDescriptionInterface *arg3 = (webrtc::SessionDescriptionInterface *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (webrtc::SetSessionDescriptionObserver *)jarg2; 
  arg3 = (webrtc::SessionDescriptionInterface *)jarg3; 
  (arg1)->SetRemoteDescription(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_ShouldFireNegotiationNeededEvent___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->ShouldFireNegotiationNeededEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_GetConfiguration___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::PeerConnectionInterface::RTCConfiguration result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (arg1)->GetConfiguration();
  jresult = new webrtc::PeerConnectionInterface::RTCConfiguration(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetConfiguration___(void * jarg1, void * jarg2) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg2 = 0 ;
  webrtc::RTCError result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::RTCConfiguration const & is null", 0);
    return 0;
  } 
  result = (arg1)->SetConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration const &)*arg2);
  jresult = new webrtc::RTCError(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_AddIceCandidate__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::IceCandidateInterface *arg2 = (webrtc::IceCandidateInterface *) 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (webrtc::IceCandidateInterface *)jarg2; 
  result = (bool)(arg1)->AddIceCandidate((webrtc::IceCandidateInterface const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_AddIceCandidate__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< std::unique_ptr< webrtc::IceCandidateInterface > > arg2 ;
  SwigValueWrapper< std::function< void (webrtc::RTCError) > > arg3 ;
  std::unique_ptr< webrtc::IceCandidateInterface > *argp2 ;
  std::function< void (webrtc::RTCError) > *argp3 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (std::unique_ptr< webrtc::IceCandidateInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::unique_ptr< webrtc::IceCandidateInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (std::function< void (webrtc::RTCError) > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (webrtc::RTCError) >", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AddIceCandidate(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_RemoveIceCandidates___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  std::vector< cricket::Candidate > *arg2 = 0 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (std::vector< cricket::Candidate > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< cricket::Candidate > const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RemoveIceCandidates((std::vector< cricket::Candidate > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetBitrate___(void * jarg1, void * jarg2) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  BitrateSettings *arg2 = 0 ;
  webrtc::RTCError result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = (BitrateSettings *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BitrateSettings const & is null", 0);
    return 0;
  } 
  result = (arg1)->SetBitrate((BitrateSettings const &)*arg2);
  jresult = new webrtc::RTCError(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetAudioPlayout___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAudioPlayout(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SetAudioRecording___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAudioRecording(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_LookupDtlsTransportByMid___(void * jarg1, const char * jarg2) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  std::string *arg2 = 0 ;
  rtc::scoped_refptr< DtlsTransportInterface > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->LookupDtlsTransportByMid((std::string const &)*arg2);
  jresult = new rtc::scoped_refptr< DtlsTransportInterface >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_GetSctpTransport___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::scoped_refptr< SctpTransportInterface > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = ((webrtc::PeerConnectionInterface const *)arg1)->GetSctpTransport();
  jresult = new rtc::scoped_refptr< SctpTransportInterface >(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_signaling_state___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::PeerConnectionInterface::SignalingState result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::PeerConnectionInterface::SignalingState)(arg1)->signaling_state();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_ice_connection_state___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::PeerConnectionInterface::IceConnectionState result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::PeerConnectionInterface::IceConnectionState)(arg1)->ice_connection_state();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_standardized_ice_connection_state___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::PeerConnectionInterface::IceConnectionState result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::PeerConnectionInterface::IceConnectionState)(arg1)->standardized_ice_connection_state();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_peer_connection_state___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::PeerConnectionInterface::PeerConnectionState result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::PeerConnectionInterface::PeerConnectionState)(arg1)->peer_connection_state();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_ice_gathering_state___(void * jarg1) {
  int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  webrtc::PeerConnectionInterface::IceGatheringState result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (webrtc::PeerConnectionInterface::IceGatheringState)(arg1)->ice_gathering_state();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_can_trickle_ice_candidates___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  absl::optional< bool > result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (arg1)->can_trickle_ice_candidates();
  jresult = new absl::optional< bool >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_AddAdaptationResource___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::scoped_refptr< Resource > arg2 ;
  rtc::scoped_refptr< Resource > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (rtc::scoped_refptr< Resource > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< Resource >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AddAdaptationResource(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_StartRtcEventLog__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< std::unique_ptr< RtcEventLogOutput > > arg2 ;
  int64_t arg3 ;
  std::unique_ptr< RtcEventLogOutput > *argp2 ;
  int64_t *argp3 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (std::unique_ptr< RtcEventLogOutput > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::unique_ptr< RtcEventLogOutput >", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->StartRtcEventLog(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_StartRtcEventLog__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  SwigValueWrapper< std::unique_ptr< RtcEventLogOutput > > arg2 ;
  std::unique_ptr< RtcEventLogOutput > *argp2 ;
  bool result;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  argp2 = (std::unique_ptr< RtcEventLogOutput > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::unique_ptr< RtcEventLogOutput >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->StartRtcEventLog(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_StopRtcEventLog___(void * jarg1) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  (arg1)->StopRtcEventLog();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_Close___(void * jarg1) {
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_signaling_thread___(void * jarg1) {
  void * jresult ;
  webrtc::PeerConnectionInterface *arg1 = (webrtc::PeerConnectionInterface *) 0 ;
  rtc::Thread *result = 0 ;
  
  arg1 = (webrtc::PeerConnectionInterface *)jarg1; 
  result = (rtc::Thread *)((webrtc::PeerConnectionInterface const *)arg1)->signaling_thread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnectionObserver___(void * jarg1) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnSignalingChange___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  webrtc::PeerConnectionInterface::SignalingState arg2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::SignalingState)jarg2; 
  (arg1)->OnSignalingChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnAddStream___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  rtc::scoped_refptr< MediaStreamInterface > arg2 ;
  rtc::scoped_refptr< MediaStreamInterface > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  argp2 = (rtc::scoped_refptr< MediaStreamInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< MediaStreamInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnAddStream(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnRemoveStream___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  rtc::scoped_refptr< MediaStreamInterface > arg2 ;
  rtc::scoped_refptr< MediaStreamInterface > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  argp2 = (rtc::scoped_refptr< MediaStreamInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< MediaStreamInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnRemoveStream(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnDataChannel___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  rtc::scoped_refptr< DataChannelInterface > arg2 ;
  rtc::scoped_refptr< DataChannelInterface > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  argp2 = (rtc::scoped_refptr< DataChannelInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< DataChannelInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnDataChannel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnRenegotiationNeeded___(void * jarg1) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  (arg1)->OnRenegotiationNeeded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnNegotiationNeededEvent___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnNegotiationNeededEvent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnIceConnectionChange___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  webrtc::PeerConnectionInterface::IceConnectionState arg2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::IceConnectionState)jarg2; 
  (arg1)->OnIceConnectionChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnStandardizedIceConnectionChange___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  webrtc::PeerConnectionInterface::IceConnectionState arg2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::IceConnectionState)jarg2; 
  (arg1)->OnStandardizedIceConnectionChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnConnectionChange___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  webrtc::PeerConnectionInterface::PeerConnectionState arg2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::PeerConnectionState)jarg2; 
  (arg1)->OnConnectionChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnIceGatheringChange___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  webrtc::PeerConnectionInterface::IceGatheringState arg2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::IceGatheringState)jarg2; 
  (arg1)->OnIceGatheringChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnIceCandidate___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  webrtc::IceCandidateInterface *arg2 = (webrtc::IceCandidateInterface *) 0 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = (webrtc::IceCandidateInterface *)jarg2; 
  (arg1)->OnIceCandidate((webrtc::IceCandidateInterface const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnIceCandidateError__SWIG_0___(void * jarg1, const char * jarg2, const char * jarg3, int jarg4, const char * jarg5) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  (arg1)->OnIceCandidateError((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnIceCandidateError__SWIG_1___(void * jarg1, const char * jarg2, int jarg3, const char * jarg4, int jarg5, const char * jarg6) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  std::string *arg6 = 0 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  (arg1)->OnIceCandidateError((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnIceCandidatesRemoved___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  std::vector< cricket::Candidate > *arg2 = 0 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = (std::vector< cricket::Candidate > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< cricket::Candidate > const & is null", 0);
    return ;
  } 
  (arg1)->OnIceCandidatesRemoved((std::vector< cricket::Candidate > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnIceConnectionReceivingChange___(void * jarg1, unsigned int jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  bool arg2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->OnIceConnectionReceivingChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnIceSelectedCandidatePairChanged___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  cricket::CandidatePairChangeEvent *arg2 = 0 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = (cricket::CandidatePairChangeEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "cricket::CandidatePairChangeEvent const & is null", 0);
    return ;
  } 
  (arg1)->OnIceSelectedCandidatePairChanged((cricket::CandidatePairChangeEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnAddTrack___(void * jarg1, void * jarg2, void * jarg3) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  rtc::scoped_refptr< RtpReceiverInterface > arg2 ;
  std::vector< rtc::scoped_refptr< MediaStreamInterface > > *arg3 = 0 ;
  rtc::scoped_refptr< RtpReceiverInterface > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  argp2 = (rtc::scoped_refptr< RtpReceiverInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< RtpReceiverInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (std::vector< rtc::scoped_refptr< MediaStreamInterface > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< rtc::scoped_refptr< MediaStreamInterface > > const & is null", 0);
    return ;
  } 
  (arg1)->OnAddTrack(arg2,(std::vector< rtc::scoped_refptr< MediaStreamInterface > > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnTrack___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  rtc::scoped_refptr< RtpTransceiverInterface > arg2 ;
  rtc::scoped_refptr< RtpTransceiverInterface > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  argp2 = (rtc::scoped_refptr< RtpTransceiverInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< RtpTransceiverInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnTrack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnRemoveTrack___(void * jarg1, void * jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  rtc::scoped_refptr< RtpReceiverInterface > arg2 ;
  rtc::scoped_refptr< RtpReceiverInterface > *argp2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  argp2 = (rtc::scoped_refptr< RtpReceiverInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< RtpReceiverInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnRemoveTrack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionObserver_OnInterestingUsage___(void * jarg1, int jarg2) {
  webrtc::PeerConnectionObserver *arg1 = (webrtc::PeerConnectionObserver *) 0 ;
  int arg2 ;
  
  arg1 = (webrtc::PeerConnectionObserver *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnInterestingUsage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_sdpType2String_set___(void * jarg1) {
  std::map< mediasoupclient::PeerConnection::SdpType,std::string const,std::less< mediasoupclient::PeerConnection::SdpType > > *arg1 = (std::map< mediasoupclient::PeerConnection::SdpType,std::string const,std::less< mediasoupclient::PeerConnection::SdpType > > *) 0 ;
  
  arg1 = (std::map< mediasoupclient::PeerConnection::SdpType,std::string const,std::less< mediasoupclient::PeerConnection::SdpType > > *)jarg1; 
  mediasoupclient::PeerConnection::sdpType2String = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_sdpType2String_get___() {
  void * jresult ;
  std::map< mediasoupclient::PeerConnection::SdpType,std::string const,std::less< mediasoupclient::PeerConnection::SdpType > > *result = 0 ;
  
  result = (std::map< mediasoupclient::PeerConnection::SdpType,std::string const,std::less< mediasoupclient::PeerConnection::SdpType > > *)&mediasoupclient::PeerConnection::sdpType2String;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_iceConnectionState2String_set___(void * jarg1) {
  std::map< webrtc::PeerConnectionInterface::IceConnectionState,std::string const,std::less< webrtc::PeerConnectionInterface::IceConnectionState > > *arg1 = (std::map< webrtc::PeerConnectionInterface::IceConnectionState,std::string const,std::less< webrtc::PeerConnectionInterface::IceConnectionState > > *) 0 ;
  
  arg1 = (std::map< webrtc::PeerConnectionInterface::IceConnectionState,std::string const,std::less< webrtc::PeerConnectionInterface::IceConnectionState > > *)jarg1; 
  mediasoupclient::PeerConnection::iceConnectionState2String = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_iceConnectionState2String_get___() {
  void * jresult ;
  std::map< webrtc::PeerConnectionInterface::IceConnectionState,std::string const,std::less< webrtc::PeerConnectionInterface::IceConnectionState > > *result = 0 ;
  
  result = (std::map< webrtc::PeerConnectionInterface::IceConnectionState,std::string const,std::less< webrtc::PeerConnectionInterface::IceConnectionState > > *)&mediasoupclient::PeerConnection::iceConnectionState2String;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_iceGatheringState2String_set___(void * jarg1) {
  std::map< webrtc::PeerConnectionInterface::IceGatheringState,std::string const,std::less< webrtc::PeerConnectionInterface::IceGatheringState > > *arg1 = (std::map< webrtc::PeerConnectionInterface::IceGatheringState,std::string const,std::less< webrtc::PeerConnectionInterface::IceGatheringState > > *) 0 ;
  
  arg1 = (std::map< webrtc::PeerConnectionInterface::IceGatheringState,std::string const,std::less< webrtc::PeerConnectionInterface::IceGatheringState > > *)jarg1; 
  mediasoupclient::PeerConnection::iceGatheringState2String = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_iceGatheringState2String_get___() {
  void * jresult ;
  std::map< webrtc::PeerConnectionInterface::IceGatheringState,std::string const,std::less< webrtc::PeerConnectionInterface::IceGatheringState > > *result = 0 ;
  
  result = (std::map< webrtc::PeerConnectionInterface::IceGatheringState,std::string const,std::less< webrtc::PeerConnectionInterface::IceGatheringState > > *)&mediasoupclient::PeerConnection::iceGatheringState2String;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_signalingState2String_set___(void * jarg1) {
  std::map< webrtc::PeerConnectionInterface::SignalingState,std::string const,std::less< webrtc::PeerConnectionInterface::SignalingState > > *arg1 = (std::map< webrtc::PeerConnectionInterface::SignalingState,std::string const,std::less< webrtc::PeerConnectionInterface::SignalingState > > *) 0 ;
  
  arg1 = (std::map< webrtc::PeerConnectionInterface::SignalingState,std::string const,std::less< webrtc::PeerConnectionInterface::SignalingState > > *)jarg1; 
  mediasoupclient::PeerConnection::signalingState2String = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_signalingState2String_get___() {
  void * jresult ;
  std::map< webrtc::PeerConnectionInterface::SignalingState,std::string const,std::less< webrtc::PeerConnectionInterface::SignalingState > > *result = 0 ;
  
  result = (std::map< webrtc::PeerConnectionInterface::SignalingState,std::string const,std::less< webrtc::PeerConnectionInterface::SignalingState > > *)&mediasoupclient::PeerConnection::signalingState2String;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnSignalingChange___(void * jarg1, int jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  webrtc::PeerConnectionInterface::SignalingState arg2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::SignalingState)jarg2; 
  (arg1)->OnSignalingChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnAddStream___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  rtc::scoped_refptr< webrtc::MediaStreamInterface > arg2 ;
  rtc::scoped_refptr< webrtc::MediaStreamInterface > *argp2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  argp2 = (rtc::scoped_refptr< webrtc::MediaStreamInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::MediaStreamInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnAddStream(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnRemoveStream___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  rtc::scoped_refptr< webrtc::MediaStreamInterface > arg2 ;
  rtc::scoped_refptr< webrtc::MediaStreamInterface > *argp2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  argp2 = (rtc::scoped_refptr< webrtc::MediaStreamInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::MediaStreamInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnRemoveStream(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnDataChannel___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  rtc::scoped_refptr< webrtc::DataChannelInterface > arg2 ;
  rtc::scoped_refptr< webrtc::DataChannelInterface > *argp2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  argp2 = (rtc::scoped_refptr< webrtc::DataChannelInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::DataChannelInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnDataChannel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnRenegotiationNeeded___(void * jarg1) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  (arg1)->OnRenegotiationNeeded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnIceConnectionChange___(void * jarg1, int jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  webrtc::PeerConnectionInterface::IceConnectionState arg2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::IceConnectionState)jarg2; 
  (arg1)->OnIceConnectionChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnIceGatheringChange___(void * jarg1, int jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  webrtc::PeerConnectionInterface::IceGatheringState arg2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::IceGatheringState)jarg2; 
  (arg1)->OnIceGatheringChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnIceCandidate___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  webrtc::IceCandidateInterface *arg2 = (webrtc::IceCandidateInterface *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  arg2 = (webrtc::IceCandidateInterface *)jarg2; 
  (arg1)->OnIceCandidate((webrtc::IceCandidateInterface const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnIceCandidatesRemoved___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  std::vector< cricket::Candidate > *arg2 = 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  arg2 = (std::vector< cricket::Candidate > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< cricket::Candidate > const & is null", 0);
    return ;
  } 
  (arg1)->OnIceCandidatesRemoved((std::vector< cricket::Candidate > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnIceConnectionReceivingChange___(void * jarg1, unsigned int jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  bool arg2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->OnIceConnectionReceivingChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnAddTrack___(void * jarg1, void * jarg2, void * jarg3) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  rtc::scoped_refptr< webrtc::RtpReceiverInterface > arg2 ;
  std::vector< rtc::scoped_refptr< webrtc::MediaStreamInterface > > *arg3 = 0 ;
  rtc::scoped_refptr< webrtc::RtpReceiverInterface > *argp2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  argp2 = (rtc::scoped_refptr< webrtc::RtpReceiverInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::RtpReceiverInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (std::vector< rtc::scoped_refptr< webrtc::MediaStreamInterface > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< rtc::scoped_refptr< webrtc::MediaStreamInterface > > const & is null", 0);
    return ;
  } 
  (arg1)->OnAddTrack(arg2,(std::vector< rtc::scoped_refptr< webrtc::MediaStreamInterface > > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnTrack___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  rtc::scoped_refptr< webrtc::RtpTransceiverInterface > arg2 ;
  rtc::scoped_refptr< webrtc::RtpTransceiverInterface > *argp2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  argp2 = (rtc::scoped_refptr< webrtc::RtpTransceiverInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::RtpTransceiverInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnTrack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnRemoveTrack___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  rtc::scoped_refptr< webrtc::RtpReceiverInterface > arg2 ;
  rtc::scoped_refptr< webrtc::RtpReceiverInterface > *argp2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  argp2 = (rtc::scoped_refptr< webrtc::RtpReceiverInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::RtpReceiverInterface >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnRemoveTrack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_OnInterestingUsage___(void * jarg1, int jarg2) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  int arg2 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnInterestingUsage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnection_PrivateListener___(void * jarg1) {
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnection_SetSessionDescriptionObserver___(void * jarg1) {
  mediasoupclient::PeerConnection::SetSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_SetSessionDescriptionObserver_GetFuture___(void * jarg1) {
  void * jresult ;
  mediasoupclient::PeerConnection::SetSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *) 0 ;
  std::future< void > result;
  
  arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *)jarg1; 
  result = (arg1)->GetFuture();
  jresult = new std::future< void >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_SetSessionDescriptionObserver_Reject___(void * jarg1, const char * jarg2) {
  mediasoupclient::PeerConnection::SetSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->Reject((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_SetSessionDescriptionObserver_OnSuccess___(void * jarg1) {
  mediasoupclient::PeerConnection::SetSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *)jarg1; 
  (arg1)->OnSuccess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_SetSessionDescriptionObserver_OnFailure___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::SetSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *) 0 ;
  webrtc::RTCError arg2 ;
  webrtc::RTCError *argp2 ;
  
  arg1 = (mediasoupclient::PeerConnection::SetSessionDescriptionObserver *)jarg1; 
  argp2 = (webrtc::RTCError *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null webrtc::RTCError", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnFailure(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnection_CreateSessionDescriptionObserver___(void * jarg1) {
  mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_CreateSessionDescriptionObserver_GetFuture___(void * jarg1) {
  void * jresult ;
  mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *) 0 ;
  SwigValueWrapper< std::future< std::string > > result;
  
  arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *)jarg1; 
  result = (arg1)->GetFuture();
  jresult = new std::future< std::string >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_CreateSessionDescriptionObserver_Reject___(void * jarg1, const char * jarg2) {
  mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->Reject((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_CreateSessionDescriptionObserver_OnSuccess___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *) 0 ;
  webrtc::SessionDescriptionInterface *arg2 = (webrtc::SessionDescriptionInterface *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *)jarg1; 
  arg2 = (webrtc::SessionDescriptionInterface *)jarg2; 
  (arg1)->OnSuccess(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_CreateSessionDescriptionObserver_OnFailure___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *) 0 ;
  webrtc::RTCError arg2 ;
  webrtc::RTCError *argp2 ;
  
  arg1 = (mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *)jarg1; 
  argp2 = (webrtc::RTCError *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null webrtc::RTCError", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnFailure(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnection_RTCStatsCollectorCallback___(void * jarg1) {
  mediasoupclient::PeerConnection::RTCStatsCollectorCallback *arg1 = (mediasoupclient::PeerConnection::RTCStatsCollectorCallback *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::RTCStatsCollectorCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_RTCStatsCollectorCallback_GetFuture___(void * jarg1) {
  void * jresult ;
  mediasoupclient::PeerConnection::RTCStatsCollectorCallback *arg1 = (mediasoupclient::PeerConnection::RTCStatsCollectorCallback *) 0 ;
  SwigValueWrapper< std::future< nlohmann::json > > result;
  
  arg1 = (mediasoupclient::PeerConnection::RTCStatsCollectorCallback *)jarg1; 
  result = (arg1)->GetFuture();
  jresult = new std::future< nlohmann::json >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_RTCStatsCollectorCallback_OnStatsDelivered___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::RTCStatsCollectorCallback *arg1 = (mediasoupclient::PeerConnection::RTCStatsCollectorCallback *) 0 ;
  rtc::scoped_refptr< webrtc::RTCStatsReport const > *arg2 = 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::RTCStatsCollectorCallback *)jarg1; 
  arg2 = (rtc::scoped_refptr< webrtc::RTCStatsReport const > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "rtc::scoped_refptr< webrtc::RTCStatsReport const > const & is null", 0);
    return ;
  } 
  (arg1)->OnStatsDelivered((rtc::scoped_refptr< webrtc::RTCStatsReport const > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_Options_config_set___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::Options *arg1 = (mediasoupclient::PeerConnection::Options *) 0 ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg2 = (webrtc::PeerConnectionInterface::RTCConfiguration *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::Options *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg2; 
  if (arg1) (arg1)->config = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_Options_config_get___(void * jarg1) {
  void * jresult ;
  mediasoupclient::PeerConnection::Options *arg1 = (mediasoupclient::PeerConnection::Options *) 0 ;
  webrtc::PeerConnectionInterface::RTCConfiguration *result = 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::Options *)jarg1; 
  result = (webrtc::PeerConnectionInterface::RTCConfiguration *)& ((arg1)->config);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_Options_factory_set___(void * jarg1, void * jarg2) {
  mediasoupclient::PeerConnection::Options *arg1 = (mediasoupclient::PeerConnection::Options *) 0 ;
  webrtc::PeerConnectionFactoryInterface *arg2 = (webrtc::PeerConnectionFactoryInterface *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::Options *)jarg1; 
  arg2 = (webrtc::PeerConnectionFactoryInterface *)jarg2; 
  if (arg1) (arg1)->factory = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_Options_factory_get___(void * jarg1) {
  void * jresult ;
  mediasoupclient::PeerConnection::Options *arg1 = (mediasoupclient::PeerConnection::Options *) 0 ;
  webrtc::PeerConnectionFactoryInterface *result = 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::Options *)jarg1; 
  result = (webrtc::PeerConnectionFactoryInterface *) ((arg1)->factory);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_PeerConnection_Options___() {
  void * jresult ;
  mediasoupclient::PeerConnection::Options *result = 0 ;
  
  result = (mediasoupclient::PeerConnection::Options *)new mediasoupclient::PeerConnection::Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnection_Options___(void * jarg1) {
  mediasoupclient::PeerConnection::Options *arg1 = (mediasoupclient::PeerConnection::Options *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_new_PeerConnection___(void * jarg1, void * jarg2) {
  void * jresult ;
  mediasoupclient::PeerConnection::PrivateListener *arg1 = (mediasoupclient::PeerConnection::PrivateListener *) 0 ;
  mediasoupclient::PeerConnection::Options *arg2 = (mediasoupclient::PeerConnection::Options *) 0 ;
  mediasoupclient::PeerConnection *result = 0 ;
  
  arg1 = (mediasoupclient::PeerConnection::PrivateListener *)jarg1; 
  arg2 = (mediasoupclient::PeerConnection::Options *)jarg2; 
  result = (mediasoupclient::PeerConnection *)new mediasoupclient::PeerConnection(arg1,(mediasoupclient::PeerConnection::Options const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_delete_PeerConnection___(void * jarg1) {
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_Close___(void * jarg1) {
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_GetConfiguration___(void * jarg1) {
  void * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  webrtc::PeerConnectionInterface::RTCConfiguration result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  result = ((mediasoupclient::PeerConnection const *)arg1)->GetConfiguration();
  jresult = new webrtc::PeerConnectionInterface::RTCConfiguration(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_SetConfiguration___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  webrtc::PeerConnectionInterface::RTCConfiguration *arg2 = 0 ;
  bool result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::RTCConfiguration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::RTCConfiguration const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_CreateOffer___(void * jarg1, void * jarg2) {
  const char * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg2 = 0 ;
  std::string result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const & is null", 0);
    return 0;
  } 
  result = (arg1)->CreateOffer((webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_CreateAnswer___(void * jarg1, void * jarg2) {
  const char * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *arg2 = 0 ;
  std::string result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  arg2 = (webrtc::PeerConnectionInterface::RTCOfferAnswerOptions *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const & is null", 0);
    return 0;
  } 
  result = (arg1)->CreateAnswer((webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_SetLocalDescription___(void * jarg1, int jarg2, const char * jarg3) {
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  mediasoupclient::PeerConnection::SdpType arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  arg2 = (mediasoupclient::PeerConnection::SdpType)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetLocalDescription(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_SetRemoteDescription___(void * jarg1, int jarg2, const char * jarg3) {
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  mediasoupclient::PeerConnection::SdpType arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  arg2 = (mediasoupclient::PeerConnection::SdpType)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetRemoteDescription(arg2,(std::string const &)*arg3);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_GetLocalDescription___(void * jarg1) {
  const char * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  std::string result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  result = (arg1)->GetLocalDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_GetRemoteDescription___(void * jarg1) {
  const char * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  std::string result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  result = (arg1)->GetRemoteDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_GetTransceivers___(void * jarg1) {
  void * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  SwigValueWrapper< std::vector< rtc::scoped_refptr< webrtc::RtpTransceiverInterface > > > result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  result = ((mediasoupclient::PeerConnection const *)arg1)->GetTransceivers();
  jresult = new std::vector< rtc::scoped_refptr< webrtc::RtpTransceiverInterface > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_AddTransceiver__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  cricket::MediaType arg2 ;
  cricket::MediaType *argp2 ;
  rtc::scoped_refptr< webrtc::RtpTransceiverInterface > result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  argp2 = (cricket::MediaType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cricket::MediaType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->AddTransceiver(arg2);
  jresult = new rtc::scoped_refptr< webrtc::RtpTransceiverInterface >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_AddTransceiver__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  rtc::scoped_refptr< webrtc::MediaStreamTrackInterface > arg2 ;
  webrtc::RtpTransceiverInit arg3 ;
  rtc::scoped_refptr< webrtc::MediaStreamTrackInterface > *argp2 ;
  webrtc::RtpTransceiverInit *argp3 ;
  rtc::scoped_refptr< webrtc::RtpTransceiverInterface > result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  argp2 = (rtc::scoped_refptr< webrtc::MediaStreamTrackInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::MediaStreamTrackInterface >", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (webrtc::RtpTransceiverInit *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null webrtc::RtpTransceiverInit", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->AddTransceiver(arg2,arg3);
  jresult = new rtc::scoped_refptr< webrtc::RtpTransceiverInterface >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_GetSenders___(void * jarg1) {
  void * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  SwigValueWrapper< std::vector< rtc::scoped_refptr< webrtc::RtpSenderInterface > > > result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  result = (arg1)->GetSenders();
  jresult = new std::vector< rtc::scoped_refptr< webrtc::RtpSenderInterface > >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_RemoveTrack___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  webrtc::RtpSenderInterface *arg2 = (webrtc::RtpSenderInterface *) 0 ;
  bool result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  arg2 = (webrtc::RtpSenderInterface *)jarg2; 
  result = (bool)(arg1)->RemoveTrack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT string SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_GetStats__SWIG_0___(void * jarg1) {
  string jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  nlohmann::json result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  result = (arg1)->GetStats();
  jresult = SWIG_csharp_string_callback((&result)->dump()); 
  return jresult;
}


SWIGEXPORT string SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_GetStats__SWIG_1___(void * jarg1, void * jarg2) {
  string jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  rtc::scoped_refptr< webrtc::RtpSenderInterface > arg2 ;
  rtc::scoped_refptr< webrtc::RtpSenderInterface > *argp2 ;
  nlohmann::json result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  argp2 = (rtc::scoped_refptr< webrtc::RtpSenderInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::RtpSenderInterface >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetStats(arg2);
  jresult = SWIG_csharp_string_callback((&result)->dump()); 
  return jresult;
}


SWIGEXPORT string SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_GetStats__SWIG_2___(void * jarg1, void * jarg2) {
  string jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  rtc::scoped_refptr< webrtc::RtpReceiverInterface > arg2 ;
  rtc::scoped_refptr< webrtc::RtpReceiverInterface > *argp2 ;
  nlohmann::json result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  argp2 = (rtc::scoped_refptr< webrtc::RtpReceiverInterface > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null rtc::scoped_refptr< webrtc::RtpReceiverInterface >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetStats(arg2);
  jresult = SWIG_csharp_string_callback((&result)->dump()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_CreateDataChannel___(void * jarg1, const char * jarg2, void * jarg3) {
  void * jresult ;
  mediasoupclient::PeerConnection *arg1 = (mediasoupclient::PeerConnection *) 0 ;
  std::string *arg2 = 0 ;
  webrtc::DataChannelInit *arg3 = (webrtc::DataChannelInit *) 0 ;
  rtc::scoped_refptr< webrtc::DataChannelInterface > result;
  
  arg1 = (mediasoupclient::PeerConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (webrtc::DataChannelInit *)jarg3; 
  result = (arg1)->CreateDataChannel((std::string const &)*arg2,(webrtc::DataChannelInit const *)arg3);
  jresult = new rtc::scoped_refptr< webrtc::DataChannelInterface >(result); 
  return jresult;
}


SWIGEXPORT rtc::RefCountInterface * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_CreateSessionDescriptionObserver_SWIGUpcast___(webrtc::CreateSessionDescriptionObserver *jarg1) {
    return (rtc::RefCountInterface *)jarg1;
}

SWIGEXPORT rtc::RefCountInterface * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_SetSessionDescriptionObserver_SWIGUpcast___(webrtc::SetSessionDescriptionObserver *jarg1) {
    return (rtc::RefCountInterface *)jarg1;
}

SWIGEXPORT rtc::RefCountInterface * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_RTCStatsCollectorCallback_SWIGUpcast___(webrtc::RTCStatsCollectorCallback *jarg1) {
    return (rtc::RefCountInterface *)jarg1;
}

SWIGEXPORT rtc::RefCountInterface * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_StreamCollectionInterface_SWIGUpcast___(webrtc::StreamCollectionInterface *jarg1) {
    return (rtc::RefCountInterface *)jarg1;
}

SWIGEXPORT rtc::RefCountInterface * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_StatsObserver_SWIGUpcast___(webrtc::StatsObserver *jarg1) {
    return (rtc::RefCountInterface *)jarg1;
}

SWIGEXPORT rtc::RefCountInterface * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnectionInterface_SWIGUpcast___(webrtc::PeerConnectionInterface *jarg1) {
    return (rtc::RefCountInterface *)jarg1;
}

SWIGEXPORT webrtc::PeerConnectionObserver * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_PrivateListener_SWIGUpcast___(mediasoupclient::PeerConnection::PrivateListener *jarg1) {
    return (webrtc::PeerConnectionObserver *)jarg1;
}

SWIGEXPORT webrtc::SetSessionDescriptionObserver * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_SetSessionDescriptionObserver_SWIGUpcast___(mediasoupclient::PeerConnection::SetSessionDescriptionObserver *jarg1) {
    return (webrtc::SetSessionDescriptionObserver *)jarg1;
}

SWIGEXPORT webrtc::CreateSessionDescriptionObserver * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_CreateSessionDescriptionObserver_SWIGUpcast___(mediasoupclient::PeerConnection::CreateSessionDescriptionObserver *jarg1) {
    return (webrtc::CreateSessionDescriptionObserver *)jarg1;
}

SWIGEXPORT webrtc::RTCStatsCollectorCallback * SWIGSTDCALL CSharp_AntelcatfMediasoupClient_PeerConnection_RTCStatsCollectorCallback_SWIGUpcast___(mediasoupclient::PeerConnection::RTCStatsCollectorCallback *jarg1) {
    return (webrtc::RTCStatsCollectorCallback *)jarg1;
}

#ifdef __cplusplus
}
#endif

