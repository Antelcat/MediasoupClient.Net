//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class RTCError : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RTCError(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RTCError obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(RTCError obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~RTCError() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          abseilPINVOKE.delete_RTCError(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public RTCError() : this(abseilPINVOKE.new_RTCError__SWIG_0(), true) {
  }

  public RTCError(RTCErrorType type) : this(abseilPINVOKE.new_RTCError__SWIG_1((int)type), true) {
  }

  public RTCError(RTCErrorType type, string message) : this(abseilPINVOKE.new_RTCError__SWIG_2((int)type, message), true) {
    if (abseilPINVOKE.SWIGPendingException.Pending) throw abseilPINVOKE.SWIGPendingException.Retrieve();
  }

  public RTCError(RTCError other) : this(abseilPINVOKE.new_RTCError__SWIG_3(RTCError.getCPtr(other)), true) {
    if (abseilPINVOKE.SWIGPendingException.Pending) throw abseilPINVOKE.SWIGPendingException.Retrieve();
  }

  public static RTCError OK() {
    RTCError ret = new RTCError(abseilPINVOKE.RTCError_OK(), true);
    return ret;
  }

  public RTCErrorType Type {
    set {
      abseilPINVOKE.RTCError_Type_set(swigCPtr, (int)value);
    } 
    get {
      RTCErrorType ret = (RTCErrorType)abseilPINVOKE.RTCError_Type_get(swigCPtr);
      return ret;
    } 
  }

  public string Message {
    set {
      abseilPINVOKE.RTCError_Message_set(swigCPtr, value);
      if (abseilPINVOKE.SWIGPendingException.Pending) throw abseilPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = abseilPINVOKE.RTCError_Message_get(swigCPtr);
      if (abseilPINVOKE.SWIGPendingException.Pending) throw abseilPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public RTCErrorDetailType ErrorDetail {
    set {
      abseilPINVOKE.RTCError_ErrorDetail_set(swigCPtr, (int)value);
    } 
    get {
      RTCErrorDetailType ret = (RTCErrorDetailType)abseilPINVOKE.RTCError_ErrorDetail_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_absl__optionalT_uint16_t_t SctpCauseCode {
    set {
      abseilPINVOKE.RTCError_SctpCauseCode_set(swigCPtr, SWIGTYPE_p_absl__optionalT_uint16_t_t.getCPtr(value));
    } 
    get {
      SWIGTYPE_p_absl__optionalT_uint16_t_t ret = new SWIGTYPE_p_absl__optionalT_uint16_t_t(abseilPINVOKE.RTCError_SctpCauseCode_get(swigCPtr), true);
      return ret;
    } 
  }

  public bool IsOk {
    get {
      bool ret = abseilPINVOKE.RTCError_IsOk_get(swigCPtr);
      return ret;
    } 
  }

}
